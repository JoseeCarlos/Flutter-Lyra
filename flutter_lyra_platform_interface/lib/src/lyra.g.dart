// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class ErrorCodesInterface {
  ErrorCodesInterface({
    required this.paymentCancelledByUser,
  });

  String paymentCancelledByUser;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['paymentCancelledByUser'] = paymentCancelledByUser;
    return pigeonMap;
  }

  static ErrorCodesInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ErrorCodesInterface(
      paymentCancelledByUser: pigeonMap['paymentCancelledByUser']! as String,
    );
  }
}

class LyraInitializeOptionsInterface {
  LyraInitializeOptionsInterface({
    required this.apiServerName,
    this.nfcEnabled,
    this.cardScanningEnabled,
  });

  String apiServerName;
  bool? nfcEnabled;
  bool? cardScanningEnabled;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['apiServerName'] = apiServerName;
    pigeonMap['nfcEnabled'] = nfcEnabled;
    pigeonMap['cardScanningEnabled'] = cardScanningEnabled;
    return pigeonMap;
  }

  static LyraInitializeOptionsInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LyraInitializeOptionsInterface(
      apiServerName: pigeonMap['apiServerName']! as String,
      nfcEnabled: pigeonMap['nfcEnabled'] as bool?,
      cardScanningEnabled: pigeonMap['cardScanningEnabled'] as bool?,
    );
  }
}

class LyraKeyInterface {
  LyraKeyInterface({
    required this.publicKey,
    required this.options,
  });

  String publicKey;
  LyraInitializeOptionsInterface options;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['publicKey'] = publicKey;
    pigeonMap['options'] = options.encode();
    return pigeonMap;
  }

  static LyraKeyInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LyraKeyInterface(
      publicKey: pigeonMap['publicKey']! as String,
      options: LyraInitializeOptionsInterface.decode(pigeonMap['options']!),
    );
  }
}

class ProcessRequestInterface {
  ProcessRequestInterface({
    required this.formToken,
    required this.errorCodes,
  });

  String formToken;
  ErrorCodesInterface errorCodes;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['formToken'] = formToken;
    pigeonMap['errorCodes'] = errorCodes.encode();
    return pigeonMap;
  }

  static ProcessRequestInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ProcessRequestInterface(
      formToken: pigeonMap['formToken']! as String,
      errorCodes: ErrorCodesInterface.decode(pigeonMap['errorCodes']!),
    );
  }
}

class _LyraHostApiCodec extends StandardMessageCodec {
  const _LyraHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ErrorCodesInterface) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LyraInitializeOptionsInterface) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is LyraKeyInterface) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ProcessRequestInterface) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return ErrorCodesInterface.decode(readValue(buffer)!);

      case 129:
        return LyraInitializeOptionsInterface.decode(readValue(buffer)!);

      case 130:
        return LyraKeyInterface.decode(readValue(buffer)!);

      case 131:
        return ProcessRequestInterface.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class LyraHostApi {
  /// Constructor for [LyraHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LyraHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _LyraHostApiCodec();

  Future<LyraKeyInterface> initialize(LyraKeyInterface arg_lyraKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LyraHostApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_lyraKey]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as LyraKeyInterface?)!;
    }
  }

  Future<int> getFormTokenVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LyraHostApi.getFormTokenVersion', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }

  Future<String> process(ProcessRequestInterface arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.LyraHostApi.process', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }
}
