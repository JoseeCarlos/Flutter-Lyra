// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package tech.bam.flutter_lyra.android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class LyraApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LyraInitializeOptionsInterface {
    private @NonNull String apiServerName;
    public @NonNull String getApiServerName() { return apiServerName; }
    public void setApiServerName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"apiServerName\" is null.");
      }
      this.apiServerName = setterArg;
    }

    private @Nullable Boolean nfcEnabled;
    public @Nullable Boolean getNfcEnabled() { return nfcEnabled; }
    public void setNfcEnabled(@Nullable Boolean setterArg) {
      this.nfcEnabled = setterArg;
    }

    private @Nullable Boolean cardScanningEnabled;
    public @Nullable Boolean getCardScanningEnabled() { return cardScanningEnabled; }
    public void setCardScanningEnabled(@Nullable Boolean setterArg) {
      this.cardScanningEnabled = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private LyraInitializeOptionsInterface() {}
    public static final class Builder {
      private @Nullable String apiServerName;
      public @NonNull Builder setApiServerName(@NonNull String setterArg) {
        this.apiServerName = setterArg;
        return this;
      }
      private @Nullable Boolean nfcEnabled;
      public @NonNull Builder setNfcEnabled(@Nullable Boolean setterArg) {
        this.nfcEnabled = setterArg;
        return this;
      }
      private @Nullable Boolean cardScanningEnabled;
      public @NonNull Builder setCardScanningEnabled(@Nullable Boolean setterArg) {
        this.cardScanningEnabled = setterArg;
        return this;
      }
      public @NonNull LyraInitializeOptionsInterface build() {
        LyraInitializeOptionsInterface pigeonReturn = new LyraInitializeOptionsInterface();
        pigeonReturn.setApiServerName(apiServerName);
        pigeonReturn.setNfcEnabled(nfcEnabled);
        pigeonReturn.setCardScanningEnabled(cardScanningEnabled);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("apiServerName", apiServerName);
      toMapResult.put("nfcEnabled", nfcEnabled);
      toMapResult.put("cardScanningEnabled", cardScanningEnabled);
      return toMapResult;
    }
    static @NonNull LyraInitializeOptionsInterface fromMap(@NonNull Map<String, Object> map) {
      LyraInitializeOptionsInterface pigeonResult = new LyraInitializeOptionsInterface();
      Object apiServerName = map.get("apiServerName");
      pigeonResult.setApiServerName((String)apiServerName);
      Object nfcEnabled = map.get("nfcEnabled");
      pigeonResult.setNfcEnabled((Boolean)nfcEnabled);
      Object cardScanningEnabled = map.get("cardScanningEnabled");
      pigeonResult.setCardScanningEnabled((Boolean)cardScanningEnabled);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LyraKeyInterface {
    private @NonNull String publicKey;
    public @NonNull String getPublicKey() { return publicKey; }
    public void setPublicKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"publicKey\" is null.");
      }
      this.publicKey = setterArg;
    }

    private @NonNull LyraInitializeOptionsInterface options;
    public @NonNull LyraInitializeOptionsInterface getOptions() { return options; }
    public void setOptions(@NonNull LyraInitializeOptionsInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"options\" is null.");
      }
      this.options = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private LyraKeyInterface() {}
    public static final class Builder {
      private @Nullable String publicKey;
      public @NonNull Builder setPublicKey(@NonNull String setterArg) {
        this.publicKey = setterArg;
        return this;
      }
      private @Nullable LyraInitializeOptionsInterface options;
      public @NonNull Builder setOptions(@NonNull LyraInitializeOptionsInterface setterArg) {
        this.options = setterArg;
        return this;
      }
      public @NonNull LyraKeyInterface build() {
        LyraKeyInterface pigeonReturn = new LyraKeyInterface();
        pigeonReturn.setPublicKey(publicKey);
        pigeonReturn.setOptions(options);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("publicKey", publicKey);
      toMapResult.put("options", (options == null) ? null : options.toMap());
      return toMapResult;
    }
    static @NonNull LyraKeyInterface fromMap(@NonNull Map<String, Object> map) {
      LyraKeyInterface pigeonResult = new LyraKeyInterface();
      Object publicKey = map.get("publicKey");
      pigeonResult.setPublicKey((String)publicKey);
      Object options = map.get("options");
      pigeonResult.setOptions((options == null) ? null : LyraInitializeOptionsInterface.fromMap((Map)options));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class LyraHostApiCodec extends StandardMessageCodec {
    public static final LyraHostApiCodec INSTANCE = new LyraHostApiCodec();
    private LyraHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LyraInitializeOptionsInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return LyraKeyInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LyraInitializeOptionsInterface) {
        stream.write(128);
        writeValue(stream, ((LyraInitializeOptionsInterface) value).toMap());
      } else 
      if (value instanceof LyraKeyInterface) {
        stream.write(129);
        writeValue(stream, ((LyraKeyInterface) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface LyraHostApi {
    void initialize(@NonNull LyraKeyInterface lyraKey, Result<LyraKeyInterface> result);
    void getFormTokenVersion(Result<Long> result);

    /** The codec used by LyraHostApi. */
    static MessageCodec<Object> getCodec() {
      return       LyraHostApiCodec.INSTANCE;    }
    /**Sets up an instance of `LyraHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, LyraHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LyraHostApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              LyraKeyInterface lyraKeyArg = (LyraKeyInterface)args.get(0);
              if (lyraKeyArg == null) {
                throw new NullPointerException("lyraKeyArg unexpectedly null.");
              }
              Result<LyraKeyInterface> resultCallback = new Result<LyraKeyInterface>() {
                public void success(LyraKeyInterface result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.initialize(lyraKeyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.LyraHostApi.getFormTokenVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getFormTokenVersion(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
