// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package tech.bam.flutter_payzen.android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Info {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Infos {
    private @Nullable String info1;
    public @Nullable String getInfo1() { return info1; }
    public void setInfo1(@Nullable String setterArg) {
      this.info1 = setterArg;
    }

    private @Nullable String info2;
    public @Nullable String getInfo2() { return info2; }
    public void setInfo2(@Nullable String setterArg) {
      this.info2 = setterArg;
    }

    public static final class Builder {
      private @Nullable String info1;
      public @NonNull Builder setInfo1(@Nullable String setterArg) {
        this.info1 = setterArg;
        return this;
      }
      private @Nullable String info2;
      public @NonNull Builder setInfo2(@Nullable String setterArg) {
        this.info2 = setterArg;
        return this;
      }
      public @NonNull Infos build() {
        Infos pigeonReturn = new Infos();
        pigeonReturn.setInfo1(info1);
        pigeonReturn.setInfo2(info2);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("info1", info1);
      toMapResult.put("info2", info2);
      return toMapResult;
    }
    static @NonNull Infos fromMap(@NonNull Map<String, Object> map) {
      Infos pigeonResult = new Infos();
      Object info1 = map.get("info1");
      pigeonResult.setInfo1((String)info1);
      Object info2 = map.get("info2");
      pigeonResult.setInfo2((String)info2);
      return pigeonResult;
    }
  }
  private static class InfosApiCodec extends StandardMessageCodec {
    public static final InfosApiCodec INSTANCE = new InfosApiCodec();
    private InfosApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Infos.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Infos) {
        stream.write(128);
        writeValue(stream, ((Infos) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface InfosApi {
    @NonNull Infos search();

    /** The codec used by InfosApi. */
    static MessageCodec<Object> getCodec() {
      return InfosApiCodec.INSTANCE;
    }

    /** Sets up an instance of `InfosApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, InfosApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.InfosApi.search", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Infos output = api.search();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
