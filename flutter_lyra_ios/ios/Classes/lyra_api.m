// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "lyra_api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface LyraInitializeOptionsInterface ()
+ (LyraInitializeOptionsInterface *)fromMap:(NSDictionary *)dict;
+ (nullable LyraInitializeOptionsInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LyraKeyInterface ()
+ (LyraKeyInterface *)fromMap:(NSDictionary *)dict;
+ (nullable LyraKeyInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation LyraInitializeOptionsInterface
+ (instancetype)makeWithApiServerName:(NSString *)apiServerName
    nfcEnabled:(nullable NSNumber *)nfcEnabled
    cardScanningEnabled:(nullable NSNumber *)cardScanningEnabled {
  LyraInitializeOptionsInterface* pigeonResult = [[LyraInitializeOptionsInterface alloc] init];
  pigeonResult.apiServerName = apiServerName;
  pigeonResult.nfcEnabled = nfcEnabled;
  pigeonResult.cardScanningEnabled = cardScanningEnabled;
  return pigeonResult;
}
+ (LyraInitializeOptionsInterface *)fromMap:(NSDictionary *)dict {
  LyraInitializeOptionsInterface *pigeonResult = [[LyraInitializeOptionsInterface alloc] init];
  pigeonResult.apiServerName = GetNullableObject(dict, @"apiServerName");
  NSAssert(pigeonResult.apiServerName != nil, @"");
  pigeonResult.nfcEnabled = GetNullableObject(dict, @"nfcEnabled");
  pigeonResult.cardScanningEnabled = GetNullableObject(dict, @"cardScanningEnabled");
  return pigeonResult;
}
+ (nullable LyraInitializeOptionsInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [LyraInitializeOptionsInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"apiServerName" : (self.apiServerName ?: [NSNull null]),
    @"nfcEnabled" : (self.nfcEnabled ?: [NSNull null]),
    @"cardScanningEnabled" : (self.cardScanningEnabled ?: [NSNull null]),
  };
}
@end

@implementation LyraKeyInterface
+ (instancetype)makeWithPublicKey:(NSString *)publicKey
    options:(LyraInitializeOptionsInterface *)options {
  LyraKeyInterface* pigeonResult = [[LyraKeyInterface alloc] init];
  pigeonResult.publicKey = publicKey;
  pigeonResult.options = options;
  return pigeonResult;
}
+ (LyraKeyInterface *)fromMap:(NSDictionary *)dict {
  LyraKeyInterface *pigeonResult = [[LyraKeyInterface alloc] init];
  pigeonResult.publicKey = GetNullableObject(dict, @"publicKey");
  NSAssert(pigeonResult.publicKey != nil, @"");
  pigeonResult.options = [LyraInitializeOptionsInterface nullableFromMap:GetNullableObject(dict, @"options")];
  NSAssert(pigeonResult.options != nil, @"");
  return pigeonResult;
}
+ (nullable LyraKeyInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [LyraKeyInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"publicKey" : (self.publicKey ?: [NSNull null]),
    @"options" : (self.options ? [self.options toMap] : [NSNull null]),
  };
}
@end

@interface LyraHostApiCodecReader : FlutterStandardReader
@end
@implementation LyraHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [LyraInitializeOptionsInterface fromMap:[self readValue]];
    
    case 129:     
      return [LyraKeyInterface fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface LyraHostApiCodecWriter : FlutterStandardWriter
@end
@implementation LyraHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[LyraInitializeOptionsInterface class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LyraKeyInterface class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface LyraHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation LyraHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[LyraHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[LyraHostApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *LyraHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    LyraHostApiCodecReaderWriter *readerWriter = [[LyraHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void LyraHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LyraHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LyraHostApi.initialize"
        binaryMessenger:binaryMessenger
        codec:LyraHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeLyraKey:completion:)], @"LyraHostApi api (%@) doesn't respond to @selector(initializeLyraKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LyraKeyInterface *arg_lyraKey = GetNullableObjectAtIndex(args, 0);
        [api initializeLyraKey:arg_lyraKey completion:^(LyraKeyInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
